<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://flakkaqi.github.io</id>
    <title>祁先生的微博客</title>
    <updated>2020-04-29T06:28:16.221Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://flakkaqi.github.io"/>
    <link rel="self" href="https://flakkaqi.github.io/atom.xml"/>
    <subtitle>You dida dida me , I huala hula you</subtitle>
    <logo>https://flakkaqi.github.io/images/avatar.png</logo>
    <icon>https://flakkaqi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 祁先生的微博客</rights>
    <entry>
        <title type="html"><![CDATA[利用Redis生成数据库全局唯一性id]]></title>
        <id>https://flakkaqi.github.io/post/li-yong-redis-sheng-cheng-shu-ju-ku-quan-ju-wei-yi-xing-id/</id>
        <link href="https://flakkaqi.github.io/post/li-yong-redis-sheng-cheng-shu-ju-ku-quan-ju-wei-yi-xing-id/">
        </link>
        <updated>2020-04-29T03:17:46.000Z</updated>
        <summary type="html"><![CDATA[<p>🔊UUID本身满足分布式唯一的ID,只是长度太长，在很多场景中无法适用，尤其在生成单号的时候，一般单号都需要能看到日期，数量等订单信息。当然在分布式中还有其他生成方式，比如雪花算法等可自行百度。这里介绍利用redis生成全局唯一id的方法：实现环境是springboot</p>
]]></summary>
        <content type="html"><![CDATA[<p>🔊UUID本身满足分布式唯一的ID,只是长度太长，在很多场景中无法适用，尤其在生成单号的时候，一般单号都需要能看到日期，数量等订单信息。当然在分布式中还有其他生成方式，比如雪花算法等可自行百度。这里介绍利用redis生成全局唯一id的方法：实现环境是springboot</p>
<!-- more -->
<h2 id="1利用springboot整个redis">1.利用springboot整个redis</h2>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
 
    &lt;groupId&gt;com.example&lt;/groupId&gt;
    &lt;artifactId&gt;demo&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
 
    &lt;name&gt;demo&lt;/name&gt;
    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;
 
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.5.8.RELEASE&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
 
    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
 
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
 
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
 
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre>
<h2 id="2application-redisyml文件">2.application-redis.yml文件</h2>
<pre><code class="language-yaml">spring:
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    timeout: 0  # 连接超时时间（毫秒）
    jedis:
      pool:
          max-active: 20 # 连接池最大连接数（使用负值表示没有限制）
          max-idle: 20  # 连接池中的最大空闲连接
          max-wait: -1 # 连接池最大阻塞等待时间（使用负值表示没有限制）
          min-idle: 0 # 连接池中的最小空闲连接
</code></pre>
<h2 id="3redis-config-配置">3.redis config 配置</h2>
<!-- more -->
<!-- more -->
<pre><code class="language-java">package com.example.demo.config;
 
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CachingConfigurerSupport;
import org.springframework.cache.interceptor.KeyGenerator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
 
import java.util.Arrays;
 
/**
 * @Title: redis配置类
 * @Package RedisConfig
 * redis配置类
 * @author syliu
 * @create 2017/9/29 0029
 */
@Configuration
public class RedisConfig {
 
 
    @Bean
    public RedisTemplate&lt;String, String&gt; redisTemplate(RedisConnectionFactory factory) {
        StringRedisTemplate template = new StringRedisTemplate(factory);
        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);
        template.setValueSerializer(jackson2JsonRedisSerializer);
        template.afterPropertiesSet();
        return template;
    }
}
</code></pre>
<h2 id="4primarykeyservice">4..PrimaryKeyService</h2>
<pre><code class="language-java">import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import java.util.Calendar;
import java.util.Date;

/**
 * 利用redis生成数据库全局唯一性id
 * * @Auther: QiShuai
 *
 * @Date: 2020/4/28 20:49
 */
@Service
public class PrimaryKeyService {

    @Autowired
    private RedisTemplate redisTemplate;

    /**
     * 获取年的后两位加上一年多少天+当前小时数作为前缀
     *
     * @param date
     * @return
     */
    public String getOrderIdPrefix(Date date) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH);
        int day = calendar.get(Calendar.DAY_OF_MONTH);
        int hour = calendar.get(Calendar.HOUR_OF_DAY);
        //补两位,因为一年最多三位数
        String monthFormat = String.format(&quot;%1$02d&quot;, month + 1);
        //补两位，因为日最多两位数
        String dayFormat = String.format(&quot;%1$02d&quot;, day);
        //补两位，因为小时最多两位数
        String hourFormat = String.format(&quot;%1$02d&quot;, hour);
        StringBuilder uniqueId = new StringBuilder();
        return uniqueId.append(year).append(monthFormat).append(dayFormat).append(hourFormat).toString();
    }

    /**
     * 参数生成全局唯一ID
     *
     * @param prefix
     * @return
     */
    public String orderId(String prefix) {
        String key = new StringBuilder().append(&quot;DEMO:ORDER_ID_&quot;).append(prefix).toString();
        Long increment = redisTemplate.opsForValue().increment(key, 1);
        //往前补6位
        return new StringBuilder().append(prefix).append(String.format(&quot;%1$06d&quot;, increment)).toString();
    }

    /**
     * 直接生成全局唯一ID
     * @param date  时间
     * @return 全局唯一ID
     */
    public String createUniqueId(Date date) {

        String orderIdPrefix = getOrderIdPrefix(date);
        String registrationNo = orderId(orderIdPrefix);
        return registrationNo;
    }

}
</code></pre>
<h2 id="5测试类">5.测试类</h2>
<pre><code class="language-java">package com.example.demo;
 
import com.example.demo.service.PrimaryKeyService;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
 
import java.util.Date;
@RunWith(SpringRunner.class)
@SpringBootTest
public class DemoApplicationTests {
    @Autowired
    private PrimaryKeyService primaryKeyService;
 
    @Test
    public void contextLoads() {
        long startMillis = System.currentTimeMillis();
        String orderIdPrefix = primaryKeyService.getOrderIdPrefix(new Date());
        for (int i = 0; i &lt; 10; i++) {
            Long aLong = primaryKeyService.orderId(orderIdPrefix);
            System.out.println(aLong);
        }
        long endMillis = System.currentTimeMillis();
        System.out.println(&quot;生成速度:&quot;+(endMillis-startMillis)+&quot;,单位毫秒&quot;);
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java如何将MultipartFile对象转为File对象]]></title>
        <id>https://flakkaqi.github.io/post/java-ru-he-jiang-multipartfile-dui-xiang-zhuan-wei-file-dui-xiang/</id>
        <link href="https://flakkaqi.github.io/post/java-ru-he-jiang-multipartfile-dui-xiang-zhuan-wei-file-dui-xiang/">
        </link>
        <updated>2020-04-26T11:17:49.000Z</updated>
        <summary type="html"><![CDATA[<p>🤸‍♂话不多说，直接上代码，就是干</p>
]]></summary>
        <content type="html"><![CDATA[<p>🤸‍♂话不多说，直接上代码，就是干</p>
<!-- more -->
<pre><code class="language-java">import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

/**
 * @Auther: QiShuai
 * @Date: 2020/4/8 10:58
 * @Description:
 */
public class MultipartFileToFile {
    /**
     * MultipartFile 转 File
     *
     * @param file
     * @throws Exception
     */
    public static File multipartFileToFile(MultipartFile file) throws Exception {

        File toFile = null;
        if (file.equals(&quot;&quot;) || file.getSize() &lt;= 0) {
            file = null;
        } else {
            InputStream ins = null;
            ins = file.getInputStream();
            toFile = new File(file.getOriginalFilename());
            inputStreamToFile(ins, toFile);
            ins.close();
        }
        return toFile;
    }

    //获取流文件
    private static void inputStreamToFile(InputStream ins, File file) {
        try {
            OutputStream os = new FileOutputStream(file);
            int bytesRead = 0;
            byte[] buffer = new byte[8192];
            while ((bytesRead = ins.read(buffer, 0, 8192)) != -1) {
                os.write(buffer, 0, bytesRead);
            }
            os.close();
            ins.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 删除本地临时文件
     * @param file
     */
    public static void deleteTempFile(File file) {
        if (file != null) {
            File del = new File(file.toURI());
            del.delete();
        }
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java创建临时文件并写入数据]]></title>
        <id>https://flakkaqi.github.io/post/java-chuang-jian-lin-shi-wen-jian-bing-xie-ru-shu-ju/</id>
        <link href="https://flakkaqi.github.io/post/java-chuang-jian-lin-shi-wen-jian-bing-xie-ru-shu-ju/">
        </link>
        <updated>2020-04-26T11:07:15.000Z</updated>
        <summary type="html"><![CDATA[<p>🤣创建文件可不就是为了保存数据吗？</p>
]]></summary>
        <content type="html"><![CDATA[<p>🤣创建文件可不就是为了保存数据吗？</p>
<!-- more -->
<pre><code class="language-java">// 调用：
{
String file = &quot;xxxx.&quot;;  //base64编码的字符串
String fileName = &quot;xxxx.txt&quot;;
StringBuilder tr = new StringBuilder();
        String tempPath = tr.append(System.getProperty(&quot;java.io.tmpdir&quot;)).append(File.separator).append(fileName).toString();
        try {
            boolean flag = Base64Util.GenerateFile(file, tempPath);
            if (!flag) {
                return &quot;文件有误，请检查后重新上传！&quot;;
            } else {
                File tempFile = new File(tempPath);
                //使用File对象
&lt;!-- more --&gt;

            }
        } catch (Exception e) {
                e.printStackTrace();
        } finally {
            //删除临时文件
            File tempFile = new File(tempPath);
            if (tempFile.exists()) {
                tempFile.delete();
            }
        }
}
/**
     * 根据字节数组字符串进行Base64解码并生成文件
     *
     * @param fileStr BASE64编码后的字符串
     * @param savedFilePath 保存文件的路径和文件名
     * @return 转换状态
     */
    public static boolean GenerateFile(String fileStr, String savedFilePath) {
        // 文件字节数组字符串数据为空
        if (StringUtils.isBlank(fileStr))
            return false;
        BASE64Decoder decoder = new BASE64Decoder();
        try {
            // Base64解码
            byte[] b = decoder.decodeBuffer(fileStr);
            for (int i = 0; i &lt; b.length; ++i) {
                {// 调整异常数据
                    if (b[i] &lt; 0)
                        b[i] += 256;
                }
            }
            // 生成文件
            OutputStream out = new FileOutputStream(savedFilePath);
            out.write(b);
            out.flush();
            out.close();
            return true;
        } catch (Exception e) {
            return false;
       }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 实现文件和base64字符串互转]]></title>
        <id>https://flakkaqi.github.io/post/java-shi-xian-wen-jian-he-base64-zi-fu-chuan-hu-zhuan/</id>
        <link href="https://flakkaqi.github.io/post/java-shi-xian-wen-jian-he-base64-zi-fu-chuan-hu-zhuan/">
        </link>
        <updated>2020-04-26T06:55:56.000Z</updated>
        <summary type="html"><![CDATA[<p>🤖有时候吧，前端给后台传的文件可能是经过BASE64转码后的字符串，到了后端我们需要对其进行解码。以下代码就是一个亲测有用的实现过程。那偶不谢.</p>
]]></summary>
        <content type="html"><![CDATA[<p>🤖有时候吧，前端给后台传的文件可能是经过BASE64转码后的字符串，到了后端我们需要对其进行解码。以下代码就是一个亲测有用的实现过程。那偶不谢.</p>
<!-- more -->
<p>😲具体代码如下：</p>
<pre><code class="language-java">package main.java.demo;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

/**
 * 适用大部分格式的文件
 *
 * @misterqi
 */
public class One {
    public static void main(String[] args) {
        One t = new One();
        String str = t.GetImageStr(&quot;C:/Users/QiShuai/Pictures/background/centerbg.jpg&quot;);
        System.out.println(str);
        boolean flag = t.GenerateImage(str, &quot;C:/Users/QiShuai/Pictures/background/centerbg2.jpg&quot;);
        System.out.println(flag);
    }

    /**
     * 将文件转化为字节数组字符串，并对其进行Base64编码处理
     *
     * @param imgFile
     * @return
     */
    public static String GetImageStr(String imgFile) {
        InputStream in = null;
        byte[] data = null;
        // 读取文件字节数组
        try {
            in = new FileInputStream(imgFile);
            data = new byte[in.available()];
            in.read(data);
            in.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        // 对字节数组Base64编码
        BASE64Encoder encoder = new BASE64Encoder();
        // 返回Base64编码过的字节数组字符串
        return encoder.encode(data);
    }

    /**
     * 根据字节数组字符串进行Base64解码并生成文件
     *
     * @param imgStr
     * @param savedImagePath
     * @return
     */
    public static boolean GenerateImage(String imgStr, String savedImagePath) {
        // 文件字节数组字符串数据为空
        if (imgStr == null)
            return false;
        BASE64Decoder decoder = new BASE64Decoder();
        try {
            // Base64解码
            byte[] b = decoder.decodeBuffer(imgStr);
            for (int i = 0; i &lt; b.length; ++i) {
                {// 调整异常数据
                    if (b[i] &lt; 0)
                        b[i] += 256;
                }
            }
            // 生成文件
            OutputStream out = new FileOutputStream(savedImagePath);
            out.write(b);
            out.flush();
            out.close();
            return true;
        } catch (Exception e) {
            return false;
        }
    }

}
</code></pre>
<p>🤤可以使用随便一个文件进行测试<br>
<img src="https://flakkaqi.github.io/post-images/1587885084240.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[友情链接]]></title>
        <id>https://flakkaqi.github.io/post/you-qing-lian-jie/</id>
        <link href="https://flakkaqi.github.io/post/you-qing-lian-jie/">
        </link>
        <updated>2020-04-18T02:38:52.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://greasyfork.org/zh-CN/#home-step-1">脚本管理器安装</a><br>
<a href="">油猴脚本下载</a><br>
<a href="http://www.win4000.com/">高清壁纸下载</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[有趣的博客网站~]]></title>
        <id>https://flakkaqi.github.io/post/you-qu-de-bo-ke-wang-zhan-~/</id>
        <link href="https://flakkaqi.github.io/post/you-qu-de-bo-ke-wang-zhan-~/">
        </link>
        <updated>2020-04-18T01:56:14.000Z</updated>
        <summary type="html"><![CDATA[<p>这里会有很多有趣的开源项目传送门👇</p>
]]></summary>
        <content type="html"><![CDATA[<p>这里会有很多有趣的开源项目传送门👇</p>
<!-- more -->
<h2 id="王者">🥇王者</h2>
<h2 id="白银">🥈白银</h2>
<p><strong>no1</strong>: <a href="http://mouto.org/">卜卜口</a></p>
<pre><code>前端开发、人像写真、二次元、有趣的开源项目、博客、多链接
</code></pre>
<h2 id="青铜">🥉青铜</h2>
<h2 id="屌丝">😹屌丝</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[有趣的开源项目~]]></title>
        <id>https://flakkaqi.github.io/post/you-qu-de-kai-yuan-xiang-mu-~/</id>
        <link href="https://flakkaqi.github.io/post/you-qu-de-kai-yuan-xiang-mu-~/">
        </link>
        <updated>2020-04-18T01:54:36.000Z</updated>
        <summary type="html"><![CDATA[<p>这里会有很多有趣的开源项目传送门👇</p>
]]></summary>
        <content type="html"><![CDATA[<p>这里会有很多有趣的开源项目传送门👇</p>
<!-- more -->
<h2 id="王者">🥇王者</h2>
<h2 id="白银">🥈白银</h2>
<p><strong>no1</strong>: <a href="http://mouto.org/">卜卜口</a></p>
<pre><code>前端开发、人像写真、二次元、有趣的开源项目、博客、多链接
</code></pre>
<h2 id="青铜">🥉青铜</h2>
<h2 id="屌丝">😹屌丝</h2>
<p><strong>no1:</strong> <a href="https://lab.magiconch.com/nbnhhsh/">能不能好好说话</a></p>
<pre><code>
GitHub项目地址：https://github.com/itorr/nbnhhsh
``




</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[这是我老婆]]></title>
        <id>https://flakkaqi.github.io/post/zhe-shi-wo-lao-po/</id>
        <link href="https://flakkaqi.github.io/post/zhe-shi-wo-lao-po/">
        </link>
        <updated>2020-04-13T09:38:40.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://flakkaqi.github.io/post-images/1586771901375.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[再别康桥 ]]></title>
        <id>https://flakkaqi.github.io/post/zai-bie-kang-qiao/</id>
        <link href="https://flakkaqi.github.io/post/zai-bie-kang-qiao/">
        </link>
        <updated>2020-04-13T09:28:00.000Z</updated>
        <content type="html"><![CDATA[<p>🤓🤓🤓###徐志摩</p>
<p>轻轻的我走了，<br>
正如我轻轻的来；<br>
我轻轻的招手，<br>
作别西天的云彩。</p>
<p>那河畔的金柳，<br>
是夕阳中的新娘；<br>
波光里的艳影，<br>
在我的心头荡漾。</p>
<p>软泥上的青荇，<br>
油油的在水底招摇；<br>
在康河的柔波里，<br>
我甘心做一条水草！</p>
<p>那榆荫下的一潭，<br>
不是清泉，是天上虹；<br>
揉碎在浮藻间，<br>
沉淀着彩虹似的梦。</p>
<p>寻梦？撑一支长篙，<br>
向青草更青处漫溯；<br>
满载一船星辉，<br>
在星辉斑斓里放歌。</p>
<p>但我不能放歌，<br>
悄悄是别离的笙箫；<br>
夏虫也为我沉默，<br>
沉默是今晚的康桥！</p>
<p>悄悄的我走了，<br>
正如我悄悄的来；<br>
我挥一挥衣袖，<br>
不带走一片云彩。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一篇文章]]></title>
        <id>https://flakkaqi.github.io/post/di-yi-pian-wen-zhang/</id>
        <link href="https://flakkaqi.github.io/post/di-yi-pian-wen-zhang/">
        </link>
        <updated>2020-04-13T06:40:37.000Z</updated>
        <content type="html"><![CDATA[<p>###仅仅是这样<br>
鱼对水说：你看不见我的眼泪，因为我在水中。<br>
水对鱼说；我能感觉到你的眼泪，因为你在我心中。<br>
我不是鱼，你也不是水。你能看见我寂寞的眼泪吗<br>
鱼对水说：我永远不会离开你，因为离开你，我无法生存。<br>
水对鱼说：我知道，可是如果你的心不在呢？<br>
我不是鱼，你也不是水。我不离开你是因为我爱你。<br>
可是，你的心里有我吗？<br>
鱼对水说：我很寂寞，因为我只能待在水中。<br>
水对鱼说：我知道，因为我的心里装着你的寂寞。<br>
我不是鱼，你也不是水。我寂寞是因为我思念你。<br>
可是，远方的你能感受到吗？<br>
鱼对水说：如果没有鱼，那水里还会剩下什么？<br>
水对鱼说：如果没有你，那又怎么会有我？<br>
我不是鱼，你也不是水。没有你的爱，我依然会好好的活。<br>
可是，好好的活并不代表我可以把你忘记。<br>
鱼对水说：一辈子不能出去看看外面的世界，是我最大的遗憾。<br>
水对鱼说：一辈子不能打消你的这个念头，是我最大的失败。<br>
我不是鱼，你也不是水。现在的我只想要一个一辈子的承诺。<br>
可是，你负担得起吗？<br>
鱼对水说：在你的一生中，我是第几条鱼？<br>
水对鱼说：你不是在水中的第一条鱼，但却是在我心中的第一条。<br>
我不是鱼，你也不是水。我们都不是彼此生命中的第一个，<br>
可是，你知道吗？你却是我第一个想嫁的人。<br>
鱼对水说：你相信一见钟情吗？<br>
水对鱼说：当我意识到你是鱼的那一刻，就知道你会游到我的心里。<br>
我不是鱼，你也不是水。我以为我对你的爱不会长久，因为那是一见钟情。<br>
可是，我错了，感情如酒，越封越浓越长久。<br>
鱼对水说：为什么每次都是我问你答？<br>
水对鱼说：因为我喜欢在问答中让你了解我的心。<br>
我不是鱼，你也不是水。为什么你总是让我等待？<br>
难道你不知道，等待=失去信心=放弃。<br>
如果我是鱼，而你是水，那该多好！水永远都知道鱼的想法，因为鱼在水心里。<br>
但是我不是鱼，你也不是水。你永远都不知道我的爱，<br>
因为我也许根本就不在你的心里。<br>
如果我是鱼，而你是水，<br>
我可以游入你的心里吗？<br>
鱼说：我终日睁开眼睛，是因为不想你离去<br>
水说：我终日流淌，是因为想时刻拥抱你<br>
我不是鱼。你也不是水。你愿不愿意让我进入你的怀抱？<br>
鱼说,我一天到晚游个不停,是因为怕你忘了我的存在<br>
水说,我一天到晚把你的呼吸化成气泡,是因为要你看到我知道你的存在<br>
我不是鱼,你不是水,但你察觉,在乎我的存在吗?<br>
但这个不是歌词，不过倒是有一首歌挺接近的</p>
]]></content>
    </entry>
</feed>