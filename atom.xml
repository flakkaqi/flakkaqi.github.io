<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://flakkaqi.github.io</id>
    <title>祁先生的微博客</title>
    <updated>2020-06-20T07:59:54.585Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://flakkaqi.github.io"/>
    <link rel="self" href="https://flakkaqi.github.io/atom.xml"/>
    <subtitle>You dida dida me , I huala hula you</subtitle>
    <logo>https://flakkaqi.github.io/images/avatar.png</logo>
    <icon>https://flakkaqi.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 祁先生的微博客</rights>
    <entry>
        <title type="html"><![CDATA[身份证校验规则]]></title>
        <id>https://flakkaqi.github.io/post/shen-fen-zheng-xiao-yan-gui-ze/</id>
        <link href="https://flakkaqi.github.io/post/shen-fen-zheng-xiao-yan-gui-ze/">
        </link>
        <updated>2020-06-20T07:51:20.000Z</updated>
        <content type="html"><![CDATA[<pre><code>     * 身份证15位编码规则：dddddd yymmdd xx p
     * dddddd：6位地区编码
     * yymmdd: 出生年(两位年)月日，如：910215
     * xx: 顺序编码，系统产生，无法确定
     * p: 性别，奇数为男，偶数为女
     * 身份证18位编码规则：dddddd yyyymmdd xxx y
     * dddddd：6位地区编码
     * yyyymmdd: 出生年(四位年)月日，如：19910215
     * xxx：顺序编码，系统产生，无法确定，奇数为男，偶数为女
     * y: 校验码，该位数值可通过前17位计算获得
     * 前17位号码加权因子为 Wi = [ 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 ]
     * 验证位 Y = [ 1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2 ]
     * 如果验证码恰好是10，为了保证身份证是十八位，那么第十八位将用X来代替
     * 校验位计算公式：Y_P = mod( ∑(Ai×Wi),11 )
     * i为身份证号码1...17 位; Y_P为校验码Y所在校验码数组位置
</code></pre>
<pre><code class="language-js">         function validateIdCard(idCard){
            //15位和18位身份证号码的正则表达式
            var regIdCard=/^(^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$)|(^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])((\d{4})|\d{3}[Xx])$)$/;
            //如果通过该验证，说明身份证格式正确，但准确性还需计算
            if(regIdCard.test(idCard)){
                if(idCard.length==18){
                    var idCardWi=new Array( 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 ); //将前17位加权因子保存在数组里
                    var idCardY=new Array( 1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2 ); //这是除以11后，可能产生的11位余数、验证码，也保存成数组
                    var idCardWiSum=0; //用来保存前17位各自乖以加权因子后的总和
                    for(var i=0;i&lt;17;i++){
                        idCardWiSum+=idCard.substring(i,i+1)*idCardWi[i];
                    }
                    var idCardMod=idCardWiSum%11;//计算出校验码所在数组的位置
                    var idCardLast=idCard.substring(17);//得到最后一位身份证号码
                    //如果等于2，则说明校验码是10，身份证号码最后一位应该是X
                    if(idCardMod==2){
                        if(idCardLast==&quot;X&quot;||idCardLast==&quot;x&quot;){
                            alert(&quot;恭喜通过验证啦！&quot;);
                        }else{
                            alert(&quot;身份证号码错误！&quot;);
                        }
                    }else{
                        //用计算出的验证码与最后一位身份证号码匹配，如果一致，说明通过，否则是无效的身份证号码
                        if(idCardLast==idCardY[idCardMod]){
                            alert(&quot;恭喜通过验证啦！&quot;);
                        }else{
                            alert(&quot;身份证号码错误！&quot;);
                        }
                    }
                }
            }else{
                alert(&quot;身份证格式不正确!&quot;);
            }
        }
    ``` 
![](https://flakkaqi.github.io/post-images/1592639889017.png)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[springboot+mybatis+swaager]]></title>
        <id>https://flakkaqi.github.io/post/springbootmybatisswaager/</id>
        <link href="https://flakkaqi.github.io/post/springbootmybatisswaager/">
        </link>
        <updated>2020-06-09T06:25:40.000Z</updated>
        <summary type="html"><![CDATA[<p>Spring Boot使用MyBatis Generator、Swagger、MyBatis是Java目前主流的ORM框架，可以参考这篇文章：<a href="http://www.ityouknow.com/springboot/2016/11/06/spring-boot-mybatis.html">在Spring Boot中使用MyBatis</a><br>
这篇文章来将介绍MyBatis Generator，（简称MBG，下文使用这个简称），该插件可以很方便的生成实体类、Mapper接口代码等，提高开发效率，它有点像.NET的EF框架中的DB First。另外，顺便介绍Spring Boot如何集成Swagger。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Spring Boot使用MyBatis Generator、Swagger、MyBatis是Java目前主流的ORM框架，可以参考这篇文章：<a href="http://www.ityouknow.com/springboot/2016/11/06/spring-boot-mybatis.html">在Spring Boot中使用MyBatis</a><br>
这篇文章来将介绍MyBatis Generator，（简称MBG，下文使用这个简称），该插件可以很方便的生成实体类、Mapper接口代码等，提高开发效率，它有点像.NET的EF框架中的DB First。另外，顺便介绍Spring Boot如何集成Swagger。</p>
<!-- more -->
<p><a href="https://www.cnblogs.com/FireworksEasyCool/p/11133827.html">点击跳转参考文章</a></p>
<h2 id="一-创建mysql数据库">一、创建MySQL数据库</h2>
<pre><code class="language-sql">create database generatortest default character set utf8mb4 collate utf8mb4_unicode_ci;
use generatortest;
create user 'generatortest'@'localhost' identified by 'generatortest123';
grant all privileges on generatortest.* to 'generatortest'@'localhost';
flush privileges;

CREATE TABLE `user`
(
  id INT NOT NULL AUTO_INCREMENT COMMENT '用户ID',
  user_name VARCHAR(50) NOT NULL COMMENT '用户名',
  `password` VARCHAR(50) NOT NULL COMMENT '密码',
  email VARCHAR(50) COMMENT '邮箱',
  avatar VARCHAR(255) COMMENT '头像',
  create_time DATETIME NOT NULL COMMENT '创建时间',
    update_time DATETIME NOT NULL COMMENT '更新时间',
    deleted TINYINT(1) default 0 COMMENT '逻辑删除',
  PRIMARY KEY (id)
);
ALTER TABLE `user` COMMENT '用户表';

CREATE TABLE role
(
  id INT NOT NULL AUTO_INCREMENT COMMENT '角色ID',
  role_name VARCHAR(50) NOT NULL COMMENT '角色名',
  enabled TINYINT(1) default 1 NOT NULL COMMENT '有效标志',
  create_time DATETIME NOT NULL COMMENT '创建时间',
    update_time DATETIME NOT NULL COMMENT '更新时间',
    deleted TINYINT(1) default 0 NOT NULL COMMENT '逻辑删除',
  PRIMARY KEY (id)
);
ALTER TABLE role COMMENT '角色表';

CREATE TABLE permission
(
  id INT NOT NULL AUTO_INCREMENT COMMENT '权限ID',
  permission_name VARCHAR(50) NOT NULL COMMENT '权限名称',
  permission_value VARCHAR(200) NOT NULL COMMENT '权限值',
  PRIMARY KEY (id)
);
ALTER TABLE permission COMMENT '权限表';

CREATE TABLE user_role
(
  user_id INT NOT NULL COMMENT '用户ID',
  role_id INT NOT NULL COMMENT '角色ID'
);
ALTER TABLE user_role COMMENT '用户角色关联表';

CREATE TABLE role_permission
(
  role_id INT NOT NULL COMMENT '角色ID',
  permission_id INT NOT NULL COMMENT '权限ID'
);
ALTER TABLE role_permission COMMENT '角色权限关联表';
</code></pre>
<h2 id="二-创建maven项目">二、创建maven项目</h2>
<h3 id="1-创建maven工程">1、创建maven工程</h3>
<p>可以参考<a href="https://www.cnblogs.com/qinxu/p/9648429.html">idea创建maven项目</a></p>
<h3 id="2-pomxml">2、pom.xml</h3>
<pre><code class="language-xml">&lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
            &lt;version&gt;2.0.2.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;mysql&lt;/groupId&gt;
            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
            &lt;version&gt;5.0.8&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
            &lt;version&gt;3.5.5&lt;/version&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;
            &lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;
            &lt;version&gt;1.3.7&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
    ```
### 3、

![](https://flakkaqi.github.io/post-images/1592639968494.webp)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[springboot创建定时任务]]></title>
        <id>https://flakkaqi.github.io/post/springboot-chuang-jian-ding-shi-ren-wu/</id>
        <link href="https://flakkaqi.github.io/post/springboot-chuang-jian-ding-shi-ren-wu/">
        </link>
        <updated>2020-06-09T03:43:42.000Z</updated>
        <summary type="html"><![CDATA[<p>😕最简单的定时任务。定时时间最好放在配置文件里。</p>
]]></summary>
        <content type="html"><![CDATA[<p>😕最简单的定时任务。定时时间最好放在配置文件里。</p>
<!-- more -->
<h3 id="定时任务">定时任务</h3>
<pre><code class="language-java">import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;

@Configuration      //1.主要用于标记配置类，兼备Component的效果。
@EnableScheduling   // 2.开启定时任务
public class QuestionnaireTimingJob {

    private static final Logger logger = LoggerFactory.getLogger(QuestionnaireTimingJob.class);

    @Value(&quot;${task.questionnaireJob.baseRestUrl}&quot;)
    private String baseUrl;

    @Scheduled(cron = &quot;${task.questionnaireJob.corn}&quot;)
    public void process() {
        logger.info(&quot;执行静态定时任务:xxxxxxx&quot;+ LocalDateTime.now());
    }
}
</code></pre>
<h3 id="配置文件application-jobyml">配置文件：application-job.yml</h3>
<pre><code class="language-yml">task:
  questionnaireJob:
    corn: 0 0 23 * * ?
    baseRestUrl：http://xxxx.xxx.cclssksls.cclslls/skss/
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://flakkaqi.github.io/post-images/1591674724449.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[springboot注解读取配置文件的值]]></title>
        <id>https://flakkaqi.github.io/post/springboot-zhu-jie-du-qu-pei-zhi-wen-jian-de-zhi/</id>
        <link href="https://flakkaqi.github.io/post/springboot-zhu-jie-du-qu-pei-zhi-wen-jian-de-zhi/">
        </link>
        <updated>2020-06-09T03:08:25.000Z</updated>
        <summary type="html"><![CDATA[<p>通常我会将一些会变得信息放到配置文件中方便后期上线或者后期维护时进行修改，在springboot项目中如何方便的读取配置文件中的值，以下将介绍两个注解：</p>
]]></summary>
        <content type="html"><![CDATA[<p>通常我会将一些会变得信息放到配置文件中方便后期上线或者后期维护时进行修改，在springboot项目中如何方便的读取配置文件中的值，以下将介绍两个注解：</p>
<!-- more -->
<p>配置文件：questionnaire.properties</p>
<pre><code>baseRestUrl=http://xxxxxx.xxx.xxxx.cn/questionnaire/
</code></pre>
<p>使用该配置文件的类</p>
<pre><code>@PropertySource(&quot;classpath:questionnaire.properties&quot;)
public class QuestionnaireTimingJob {
        @Value(&quot;${baseRestUrl}&quot;)
         private String baseUrl;
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://flakkaqi.github.io/post-images/1591673719380.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[全角、半角对照表]]></title>
        <id>https://flakkaqi.github.io/post/quan-jiao-ban-jiao-dui-zhao-biao/</id>
        <link href="https://flakkaqi.github.io/post/quan-jiao-ban-jiao-dui-zhao-biao/">
        </link>
        <updated>2020-06-03T08:39:54.000Z</updated>
        <summary type="html"><![CDATA[<p>🤡用户输入的全角可能在后台处理成半角，很多方法并不适用所有的全角半角转换，所以，最简单粗暴的方法就是遍历.......</p>
]]></summary>
        <content type="html"><![CDATA[<p>🤡用户输入的全角可能在后台处理成半角，很多方法并不适用所有的全角半角转换，所以，最简单粗暴的方法就是遍历.......</p>
<!-- more -->
<h3 id="全角半角字符对照表">全角半角字符对照表</h3>
<pre><code>ａ a ｂ b ｃ c ｄ d ｅ e ｆ f ｇ g ｈ h ｉ i ｊ j ｋ k ｌ l ｍ m ｎ n ｏ o ｐ p ｑ q ｒ r ｓ s ｔ t ｕ u ｖ v ｗ w ｘ x ｙ y ｚ z Ａ A Ｂ B Ｃ C Ｄ D Ｅ E Ｆ F Ｇ G Ｈ H Ｉ I Ｊ J Ｋ K Ｌ L Ｍ M Ｎ N Ｏ O Ｐ P Ｑ Q Ｒ R Ｓ S Ｔ T Ｕ U Ｖ V Ｗ W Ｘ X Ｙ Y Ｚ Z １ 1 ２ 2 ３ 3 ４ 4 ５ 5 ６ 6 ７ 7 ８ 8 ９ 9 ０ 0 ｀ ` ” &quot; ’ ' “ &quot; ‘ ' ＿ _ － - ～ ~ ＝ = ＋ + ＼ \ ｜ | ／ / （ ( ） ) ［ [ ］ ] 【 [ 】 ] ｛ { ｝ } ＜ &lt; ＞ &gt; ． . ， , ； ; ： : ！ ! ＾ ^ ％ % ＃ # ＠ @ ＄ $ ＆ &amp; ？ ? ＊ * 。 .
</code></pre>
<pre><code class="language-java">public static void main(String[] args) {
        String arr = &quot;中国，中文，标点符号！你好？１２３４５＠＃【】+=-（）。&quot;;
        char[] chars = arr.toCharArray();
        char[][] charTable = {
               {'ａ', 'ｂ', 'ｃ', 'ｄ', 'ｅ', 'ｆ', 'ｇ', 'ｈ', 'ｉ', 'ｊ', 'ｋ', 'ｌ', 'ｍ', 'ｎ', 'ｏ', 'ｐ', 'ｑ',
                        'ｒ', 'ｓ', 'ｔ', 'ｕ', 'ｖ', 'ｗ', 'ｘ', 'ｙ', 'ｚ', 'Ａ', 'Ｂ', 'Ｃ', 'Ｄ', 'Ｅ', 'Ｆ', 'Ｇ',
                        'Ｈ', 'Ｉ', 'Ｊ', 'Ｋ', 'Ｌ', 'Ｍ', 'Ｎ', 'Ｏ', 'Ｐ', 'Ｑ', 'Ｒ', 'Ｓ', 'Ｔ', 'Ｕ', 'Ｖ', 'Ｗ',
                        'Ｘ', 'Ｙ', 'Ｚ', '１', '２', '３', '４', '５', '６', '７', '８', '９', '０', '｀', '”', '’',
                        '“', '‘', '＿', '－', '～', '＝', '＋', '＼', '｜', '／', '（', '）', '［', '］', '【', '】',
                        '｛', '｝', '＜', '＞', '．', '，', '；', '：', '！', '＾', '％', '＃', '＠', '＄', '＆', '？',
                        '＊', '。','　'},
                {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
                        'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
                        'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '1', '2', '3', '4', '5', '6',
                        '7', '8', '9', '0', '`', '&quot;', '\'', '&quot;', '\'', '_', '-', '~', '=', '+', '\\', '|', '/',
                        '(', ')', '[', ']', '[', ']', '{', '}', '&lt;', '&gt;', '.', ',', ';', ':', '!', '^', '%', '#', '@',
                        '$', '&amp;', '?', '*', '.',' '}
        };
        for (int i = 0; i &lt; chars.length; i++) {
            for (int j = 0; j &lt; charTable[0].length; j++) {
                if (chars[i] == charTable[0][j]) {
                    chars[i] = charTable[1][j];
                }
            }
        }
        System.out.println(String.valueOf(chars));
    }
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://flakkaqi.github.io/post-images/1591178131634.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mybatisplus代码生成器]]></title>
        <id>https://flakkaqi.github.io/post/mybatisplus-dai-ma-sheng-cheng-qi/</id>
        <link href="https://flakkaqi.github.io/post/mybatisplus-dai-ma-sheng-cheng-qi/">
        </link>
        <updated>2020-05-29T01:20:53.000Z</updated>
        <summary type="html"><![CDATA[<p>😇使用myabtisplus代码生成器可以大大提升代码的开发效率</p>
]]></summary>
        <content type="html"><![CDATA[<p>😇使用myabtisplus代码生成器可以大大提升代码的开发效率</p>
<!-- more -->
<h3 id="引入依赖">引入依赖</h3>
<pre><code class="language-java">import com.baomidou.mybatisplus.enums.IdType;
import com.baomidou.mybatisplus.generator.AutoGenerator;
import com.baomidou.mybatisplus.generator.config.DataSourceConfig;
import com.baomidou.mybatisplus.generator.config.GlobalConfig;
import com.baomidou.mybatisplus.generator.config.PackageConfig;
import com.baomidou.mybatisplus.generator.config.StrategyConfig;
import com.baomidou.mybatisplus.generator.config.rules.DbType;
import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;
</code></pre>
<h3 id="工具类">工具类</h3>
<pre><code class="language-java">
public class GeneratorTest {

    public static void main(String[] args) {
        //1、全局配置
        GlobalConfig config = new GlobalConfig();
        config.setActiveRecord(true)//开启AR模式
                .setAuthor(&quot;qishuai&quot;)//设置作者
                //生成路径(一般都是生成在此项目的src/main/java下面)
                .setOutputDir(&quot;C:\\javaProject\\spacework\\src\\main\\java&quot;)
                .setFileOverride(false)//第二次生成不会把第一次生成的覆盖掉
                .setIdType(IdType.AUTO)//主键策略
                .setServiceName(&quot;%sService&quot;)//生成的service接口名字首字母是否为I，这样设置就没有I
                .setBaseResultMap(true)//生成resultMap
                .setBaseColumnList(true)//在xml中生成基础列
                .setOpen(false);//当代码生成完成之后是否打开代码所在的文件夹
        //2、数据源配置
        DataSourceConfig dataSourceConfig = new DataSourceConfig();
        dataSourceConfig.setDbType(DbType.ORACLE)//数据库类型
                .setDriverName(&quot;dm.jdbc.driver.DmDriver&quot;)
                .setUrl(&quot;jdbc:**://**.**.**.**:****:****/***&quot;)
                .setUsername(&quot;******&quot;)
                .setPassword(&quot;*******&quot;);
        //3、策略配置
        StrategyConfig strategyConfig = new StrategyConfig();
        strategyConfig.setCapitalMode(true)//开启全局大写命名
                .setDbColumnUnderline(true)//表名字段名使用下划线
                .setNaming(NamingStrategy.underline_to_camel)//下划线到驼峰的命名方式
                .setTablePrefix(&quot;&quot;)//表名前缀
                .setEntityLombokModel(true)//使用lombok
                .setInclude(&quot;BASIC_DATA_T&quot;);//逆向工程使用的表
        //4、包名策略配置
        PackageConfig packageConfig = new PackageConfig();
        packageConfig.setParent(&quot;com.test.bapp.demo&quot;)//设置包名的parent
                .setMapper(&quot;mapper&quot;)
                .setService(&quot;service&quot;)
                .setController(&quot;controller&quot;)
                .setEntity(&quot;entity&quot;)
                .setXml(&quot;mapper.mapping&quot;);//设置xml文件的目录
        //5、整合配置
        AutoGenerator autoGenerator = new AutoGenerator();
        autoGenerator.setGlobalConfig(config)
                .setDataSource(dataSourceConfig)
                .setStrategy(strategyConfig)
                .setPackageInfo(packageConfig);
        //6、执行
        autoGenerator.execute();
    }
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://flakkaqi.github.io/post-images/1590716277577.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java导出EXCEL工具类]]></title>
        <id>https://flakkaqi.github.io/post/java-dao-chu-excel-gong-ju-lei/</id>
        <link href="https://flakkaqi.github.io/post/java-dao-chu-excel-gong-ju-lei/">
        </link>
        <updated>2020-05-27T09:53:07.000Z</updated>
        <summary type="html"><![CDATA[<p>😄后端将数据生成excel文件，以流的形式返回给前端。</p>
]]></summary>
        <content type="html"><![CDATA[<p>😄后端将数据生成excel文件，以流的形式返回给前端。</p>
<!-- more -->
<p>一、将查询结果集封装为实体集合</p>
<pre><code class="language-java">import com.alibaba.excel.annotation.ExcelProperty;
import com.alibaba.excel.metadata.BaseRowModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Data;
import lombok.EqualsAndHashCode;
/**
 * @Auther: QiShuai
 * @Date: 2020/5/27 14:26
 * @Description: EXCEL数据获取
 */
@Data
@EqualsAndHashCode(callSuper = false)
@ApiModel(&quot;EXCEL数据获取&quot;)
public class ConsultExcelResp extends BaseRowModel {

    @ExcelProperty(value = &quot;提交人&quot;,index = 0)  //excle对应的列数
    @ApiModelProperty(&quot;提交人&quot;)
    private String userName;

    @ExcelProperty(value = &quot;省份&quot;,index = 1) //excle对应的列数
    @ApiModelProperty(&quot;省份&quot;)
    private String province;
}
</code></pre>
<p>二、工具类</p>
<pre><code class="language-java">package cn.gwssi.bapp.common.exportExcel;

import com.alibaba.excel.EasyExcel;
import com.alibaba.excel.metadata.BaseRowModel;
import com.alibaba.excel.support.ExcelTypeEnum;
import org.apache.poi.hssf.usermodel.*;

import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

public class ExcelUtil {

    /**
     * 生成excel
     * @param sheetName
     * @param title
     * @param values
     * @param wb
     * @return
     */
    public static HSSFWorkbook getHSSFWorkbook(String sheetName, String[] title, String[][] values, HSSFWorkbook wb) {

        // 第一步，创建一个HSSFWorkbook，对应一个Excel文件
        if (wb == null) {
            wb = new HSSFWorkbook();
        }

        // 第二步，在workbook中添加一个sheet,对应Excel文件中的sheet
        HSSFSheet sheet = wb.createSheet(sheetName);

        // 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制
        HSSFRow row = sheet.createRow(0);

        // 第四步，创建单元格，并设置值表头 设置表头居中
        HSSFCellStyle style = wb.createCellStyle();
        /*style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 创建一个居中格式*/

        // 声明列对象
        HSSFCell cell = null;

        // 创建标题
        for (int i = 0; i &lt; title.length; i++) {
            cell = row.createCell(i);
            cell.setCellValue(title[i]);
            cell.setCellStyle(style);
        }

        // 创建内容
        for (int i = 0; i &lt; values.length; i++) {
            row = sheet.createRow(i + 1);
            for (int j = 0; j &lt; values[i].length; j++) {
                // 将内容按顺序赋给对应的列对象
                row.createCell(j).setCellValue(values[i][j]);
            }
        }
        return wb;
    }

    /**
     * 发送响应流方法
     * @param response
     * @param fileName
     */
    public static void setResponseHeader(HttpServletResponse response, String fileName) {
        try {
            try {
                fileName = new String(fileName.getBytes(),&quot;ISO8859-1&quot;);
            } catch (UnsupportedEncodingException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            response.setContentType(&quot;application/octet-stream;charset=ISO8859-1&quot;);
            response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot;+ fileName);
            response.addHeader(&quot;Pargam&quot;, &quot;no-cache&quot;);
            response.addHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;);
            response.setCharacterEncoding(&quot;UTF-8&quot;);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     *
     * 功能描述: 写excel内容
     *
     * @param:
     * @return:
     * @auther: jiaoguojin
     * @date: 2020/3/28 17:38
     */
    public static void writeExcel(String fileName, List&lt;? extends BaseRowModel&gt; resultList,
                                  HttpServletResponse response, Class dataClass) throws Exception {
        EasyExcel.write(getOutputStream(fileName,response), dataClass)
                .excelType(ExcelTypeEnum.XLSX)
                .sheet(fileName)
                .doWrite(resultList);
    }
    /**
     *
     * 功能描述: 写excel内容 动态表头
     *
     * @param:
     * @return:
     * @auther: ykf
     * @date: 2020/3/28 17:38
     */
    public static void writeExcel(String fileName, List resultList,
                                              HttpServletResponse response, Class dataClass, File templateFile) throws Exception {
        EasyExcel.write(getOutputStream(fileName,response))
                .head(dataClass)
                .withTemplate(templateFile)
                .sheet(0)
                .doWrite(resultList);

//        // 这里 需要指定写用哪个class去写
//        ExcelWriter excelWriter = EasyExcel.write(getOutputStream(fileName,response),dataClass).withTemplate(templateFile).build();
//
//        // 把sheet设置为不需要头 不然会输出sheet的头 这样看起来第一个table 就有2个头了
//        WriteSheet writeSheet = EasyExcel.writerSheet(0).needHead(Boolean.FALSE).build();
//
//        // 这里必须指定需要头，table 会继承sheet的配置，sheet配置了不需要，table 默认也是不需要
//        WriteTable writeTable0 = EasyExcel.writerTable(0).needHead(Boolean.FALSE).build();
//        WriteTable writeTable1 = EasyExcel.writerTable(1).needHead(Boolean.TRUE).build();
//        writeTable0.setHead(head());
//        writeTable0.setRelativeHeadRowIndex(-2);
//        writeTable1.setRelativeHeadRowIndex(0);
//        // 第一次写入会创建头
//        List&lt;test&gt; list = new ArrayList();
//        list.add(new test(&quot;23423423423&quot;,&quot;aseraerawerf&quot;));
//        list.add(new test(&quot;234238888888888&quot;,&quot;aseraerdddddddddddddddd&quot; +
//                &quot;+awerf&quot;));
//        excelWriter.write(list, writeSheet, writeTable0);
//        // 第二次写如也会创建头，然后在第一次的后面写入数据
//        excelWriter.write(resultList, writeSheet, writeTable1);
//        // 千万别忘记finish 会帮忙关闭流
//        excelWriter.finish();
    }
    /**
     *
     * 功能描述: 导出文件时为Writer生成OutputStream
     *
     * @param:
     * @return:
     * @auther: jiaoguojin
     * @date: 2020/3/27 18:53
     */
    private static OutputStream getOutputStream(String fileName,
                                                HttpServletResponse response) throws Exception {
        try {
            fileName = URLEncoder.encode(fileName, &quot;UTF-8&quot;);
            response.setContentType(&quot;application/vnd.ms-excel&quot;);
            response.setCharacterEncoding(&quot;utf8&quot;);
            response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot; + fileName + &quot;.xlsx&quot;);
            response.setHeader(&quot;Pragma&quot;, &quot;public&quot;);
            response.setHeader(&quot;Cache-Control&quot;, &quot;no-store&quot;);
            response.addHeader(&quot;Cache-Control&quot;, &quot;max-age=0&quot;);
            return response.getOutputStream();
        } catch (IOException e) {
            throw new Exception(&quot;导出excel表格失败!&quot;, e);
        }
    }


    private static List&lt;List&lt;String&gt;&gt; head() {
        List&lt;List&lt;String&gt;&gt; list = new ArrayList&lt;List&lt;String&gt;&gt;();
        List&lt;String&gt; head0 = new ArrayList&lt;String&gt;();
        head0.add(&quot;字符串&quot; + System.currentTimeMillis());
        List&lt;String&gt; head1 = new ArrayList&lt;String&gt;();
        head1.add(&quot;数字&quot; + System.currentTimeMillis());
        List&lt;String&gt; head2 = new ArrayList&lt;String&gt;();
        head2.add(&quot;日期&quot; + System.currentTimeMillis());
        list.add(head0);
        list.add(head1);
        list.add(head2);
        return list;
    }
}
</code></pre>
<p>三、使用示例</p>
<pre><code class="language-java">public void consultListToExcel(HttpServletResponse response) throws Exception {
  List&lt;ConsultExcelResp&gt; list = xxwConsultTMapper.getConsultListToExcel();
  String filename = &quot;网上咨询回复表&quot;;
  ExcelUtil.writeExcel(filename, list, response, ConsultExcelResp.class);
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://flakkaqi.github.io/post-images/1590573767663.webp" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java http请求工具类]]></title>
        <id>https://flakkaqi.github.io/post/java-http-qing-qiu-gong-ju-lei/</id>
        <link href="https://flakkaqi.github.io/post/java-http-qing-qiu-gong-ju-lei/">
        </link>
        <updated>2020-05-12T12:21:48.000Z</updated>
        <summary type="html"><![CDATA[<p>😚个人觉得时非常简单实用。</p>
]]></summary>
        <content type="html"><![CDATA[<p>😚个人觉得时非常简单实用。</p>
<!-- more -->
<pre><code class="language-java">package cn.gwssi.bapp.common.util;

import com.alibaba.fastjson.JSONObject;
import org.apache.http.HttpEntity;
import org.apache.http.HttpStatus;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

/**
 * HttpClient工具类
 */
public class HttpClientUtils {
    private static Logger logger = LoggerFactory.getLogger(HttpClientUtils.class); // 日志记录

    private static RequestConfig requestConfig = null;

    static {
        // 设置请求和传输超时时间
        requestConfig = RequestConfig.custom().setSocketTimeout(60000).setConnectTimeout(60000).build();
    }

    /**
     * post请求传输json参数
     *
     * @param url       url地址
     * @param jsonParam 参数
     * @return
     */
    public static JSONObject httpPost(String url, JSONObject jsonParam) {
        // post请求返回结果
        CloseableHttpClient httpClient = HttpClients.createDefault();
        JSONObject jsonResult = null;
        HttpPost httpPost = new HttpPost(url);
        // 设置请求和传输超时时间
        httpPost.setConfig(requestConfig);
        try {
            if (null != jsonParam) {
                // 解决中文乱码问题
                StringEntity entity = new StringEntity(jsonParam.toString(), &quot;utf-8&quot;);
                entity.setContentEncoding(&quot;UTF-8&quot;);
                entity.setContentType(&quot;application/json&quot;);
                httpPost.setEntity(entity);
            }
            CloseableHttpResponse result = httpClient.execute(httpPost);
            // 请求发送成功，并得到响应
            if (result.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                String str = &quot;&quot;;
                try {
                    // 读取服务器返回过来的json字符串数据
                    str = EntityUtils.toString(result.getEntity(), &quot;utf-8&quot;);
                    // 把json字符串转换成json对象
                    jsonResult = JSONObject.parseObject(str);
                } catch (Exception e) {
                    logger.error(&quot;post请求提交失败:&quot; + url, e);
                }
            }
        } catch (IOException e) {
            logger.error(&quot;post请求提交失败:&quot; + url, e);
        } finally {
            httpPost.releaseConnection();
        }
        return jsonResult;
    }

    /**
     * post请求传输String参数 例如：name=Jack&amp;sex=1&amp;type=2
     * Content-type:application/x-www-form-urlencoded
     *
     * @param url      url地址
     * @param strParam 参数
     * @return
     */
    public static JSONObject httpPost(String url, String strParam) {
        // post请求返回结果
        CloseableHttpClient httpClient = HttpClients.createDefault();
        JSONObject jsonResult = null;
        HttpPost httpPost = new HttpPost(url);
        httpPost.setConfig(requestConfig);
        try {
            if (null != strParam) {
                // 解决中文乱码问题
                StringEntity entity = new StringEntity(strParam, &quot;utf-8&quot;);
                entity.setContentEncoding(&quot;UTF-8&quot;);
                entity.setContentType(&quot;application/x-www-form-urlencoded&quot;);
                httpPost.setEntity(entity);
            }
            CloseableHttpResponse result = httpClient.execute(httpPost);
            // 请求发送成功，并得到响应
            if (result.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                String str = &quot;&quot;;
                try {
                    // 读取服务器返回过来的json字符串数据
                    str = EntityUtils.toString(result.getEntity(), &quot;utf-8&quot;);
                    // 把json字符串转换成json对象
                    jsonResult = JSONObject.parseObject(str);
                } catch (Exception e) {
                    logger.error(&quot;post请求提交失败:&quot; + url, e);
                }
            }
        } catch (IOException e) {
            logger.error(&quot;post请求提交失败:&quot; + url, e);
        } finally {
            httpPost.releaseConnection();
        }
        return jsonResult;
    }

    /**
     * 发送get请求
     *
     * @param url 路径
     * @return
     */
    public static JSONObject httpGet(String url) {
        // get请求返回结果
        JSONObject jsonResult = null;
        CloseableHttpClient client = HttpClients.createDefault();
        // 发送get请求
        HttpGet request = new HttpGet(url);
        request.setConfig(requestConfig);
        try {
            CloseableHttpResponse response = client.execute(request);

            // 请求发送成功，并得到响应
            if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                // 读取服务器返回过来的json字符串数据
                HttpEntity entity = response.getEntity();
                String strResult = EntityUtils.toString(entity, &quot;utf-8&quot;);
                // 把json字符串转换成json对象
                jsonResult = JSONObject.parseObject(strResult);
            } else {
                logger.error(&quot;get请求提交失败:&quot; + url);
            }
        } catch (IOException e) {
            logger.error(&quot;get请求提交失败:&quot; + url, e);
        } finally {
            request.releaseConnection();
        }
        return jsonResult;
    }

    /**
     * post请求传输String参数 例如：name=Jack&amp;sex=1&amp;type=2
     * Content-type:application/x-www-form-urlencoded
     *
     * @param url      url地址
     * @param strParam 参数
     * @return String
     */
    public static String httpPostStr(String url, String strParam) {
        String str = &quot;&quot;;
        // post请求返回结果
        CloseableHttpClient httpClient = HttpClients.createDefault();
        JSONObject jsonResult = null;
        HttpPost httpPost = new HttpPost(url);
        httpPost.setConfig(requestConfig);
        try {
            if (null != strParam) {
                // 解决中文乱码问题
                StringEntity entity = new StringEntity(strParam, &quot;utf-8&quot;);
                entity.setContentEncoding(&quot;UTF-8&quot;);
                entity.setContentType(&quot;application/x-www-form-urlencoded&quot;);
                httpPost.setEntity(entity);
            }
            CloseableHttpResponse result = httpClient.execute(httpPost);
            // 请求发送成功，并得到响应
            if (result.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {

                try {
                    // 读取服务器返回过来的json字符串数据
                    str = EntityUtils.toString(result.getEntity(), &quot;utf-8&quot;);
                    // 把json字符串转换成json对象
                    /*jsonResult = JSONObject.parseObject(str);*/
                } catch (Exception e) {
                    logger.error(&quot;post请求提交失败:&quot; + url, e);
                }
            }
        } catch (IOException e) {
            logger.error(&quot;post请求提交失败:&quot; + url, e);
        } finally {
            httpPost.releaseConnection();
        }
        return str;
    }

}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://flakkaqi.github.io/post-images/1589286418244.webp" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAVA日期比较时间大小的几种方法]]></title>
        <id>https://flakkaqi.github.io/post/java-ri-qi-bi-jiao-shi-jian-da-xiao-de-ji-chong-fang-fa/</id>
        <link href="https://flakkaqi.github.io/post/java-ri-qi-bi-jiao-shi-jian-da-xiao-de-ji-chong-fang-fa/">
        </link>
        <updated>2020-05-09T03:26:44.000Z</updated>
        <summary type="html"><![CDATA[<p>😩随便写写</p>
]]></summary>
        <content type="html"><![CDATA[<p>😩随便写写</p>
<!-- more -->
<h3 id="思路一">思路一：</h3>
<p>将日期字符串转为整数进行比较</p>
<pre><code class="language-java">/**
     * @title: dateCompare
     * @description: 比较日期大小
     * @param date1 日期1
     * @param date2 日期2
     * @return
     */
    public static int dateCompare(Date date1, Date date2) {
        SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyyMMdd&quot;);
        String dateFirst = dateFormat.format(date1);
        String dateLast = dateFormat.format(date2);
        int dateFirstIntVal = Integer.parseInt(dateFirst);
        int dateLastIntVal = Integer.parseInt(dateLast);
        if (dateFirstIntVal &gt; dateLastIntVal) {
            return 1;
        } else if (dateFirstIntVal &lt; dateLastIntVal) {
            return -1;
        }
        return 0;
    }

    ```
### 思路二：
将字符串装维date对象进行比较

``` java
SimpleDateFormat format = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
            Date begin = format.parse(&quot;2020-05-02 00:00:00&quot;);
            Date end = format.parse(&quot;2020-05-07 00:00:00&quot;);
            if (end.getTime() &lt; begin.getTime()) 
            //利用getTime()方法比较大小
            }
</code></pre>
<p>Date对象本身还有三种自带的比较大小的方法可以使用：</p>
<pre><code class="language-java">Date date = new Date(); //获取当前的系统时间。
            date.before();
            date.after();
            date.compareTo()
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://flakkaqi.github.io/post-images/1589003518003.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用Redis生成数据库全局唯一性id]]></title>
        <id>https://flakkaqi.github.io/post/li-yong-redis-sheng-cheng-shu-ju-ku-quan-ju-wei-yi-xing-id/</id>
        <link href="https://flakkaqi.github.io/post/li-yong-redis-sheng-cheng-shu-ju-ku-quan-ju-wei-yi-xing-id/">
        </link>
        <updated>2020-04-29T03:17:46.000Z</updated>
        <summary type="html"><![CDATA[<p>🔊UUID本身满足分布式唯一的ID,只是长度太长，在很多场景中无法适用，尤其在生成单号的时候，一般单号都需要能看到日期，数量等订单信息。当然在分布式中还有其他生成方式，比如雪花算法等可自行百度。这里介绍利用redis生成全局唯一id的方法：实现环境是springboot</p>
]]></summary>
        <content type="html"><![CDATA[<p>🔊UUID本身满足分布式唯一的ID,只是长度太长，在很多场景中无法适用，尤其在生成单号的时候，一般单号都需要能看到日期，数量等订单信息。当然在分布式中还有其他生成方式，比如雪花算法等可自行百度。这里介绍利用redis生成全局唯一id的方法：实现环境是springboot</p>
<!-- more -->
<h2 id="1利用springboot整个redis">1.利用springboot整个redis</h2>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
 
    &lt;groupId&gt;com.example&lt;/groupId&gt;
    &lt;artifactId&gt;demo&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;packaging&gt;jar&lt;/packaging&gt;
 
    &lt;name&gt;demo&lt;/name&gt;
    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;
 
    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.5.8.RELEASE&lt;/version&gt;
        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
    &lt;/parent&gt;
 
    &lt;properties&gt;
        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;
 
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
 
        &lt;dependency&gt;
            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
            &lt;artifactId&gt;lombok&lt;/artifactId&gt;
            &lt;optional&gt;true&lt;/optional&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
 
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre>
<h2 id="2application-redisyml文件">2.application-redis.yml文件</h2>
<pre><code class="language-yaml">spring:
  redis:
    database: 0
    host: 127.0.0.1
    port: 6379
    timeout: 0  # 连接超时时间（毫秒）
    jedis:
      pool:
          max-active: 20 # 连接池最大连接数（使用负值表示没有限制）
          max-idle: 20  # 连接池中的最大空闲连接
          max-wait: -1 # 连接池最大阻塞等待时间（使用负值表示没有限制）
          min-idle: 0 # 连接池中的最小空闲连接
</code></pre>
<h2 id="3redis-config-配置">3.redis config 配置</h2>
<!-- more -->
<!-- more -->
<pre><code class="language-java">package com.example.demo.config;
 
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.CachingConfigurerSupport;
import org.springframework.cache.interceptor.KeyGenerator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
 
import java.util.Arrays;
 
/**
 * @Title: redis配置类
 * @Package RedisConfig
 * redis配置类
 * @author syliu
 * @create 2017/9/29 0029
 */
@Configuration
public class RedisConfig {
 
 
    @Bean
    public RedisTemplate&lt;String, String&gt; redisTemplate(RedisConnectionFactory factory) {
        StringRedisTemplate template = new StringRedisTemplate(factory);
        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);
        template.setValueSerializer(jackson2JsonRedisSerializer);
        template.afterPropertiesSet();
        return template;
    }
}
</code></pre>
<h2 id="4primarykeyservice">4..PrimaryKeyService</h2>
<pre><code class="language-java">import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import java.util.Calendar;
import java.util.Date;

/**
 * 利用redis生成数据库全局唯一性id
 * * @Auther: QiShuai
 *
 * @Date: 2020/4/28 20:49
 */
@Service
public class PrimaryKeyService {

    @Autowired
    private RedisTemplate redisTemplate;

    /**
     * 获取年的后两位加上一年多少天+当前小时数作为前缀
     *
     * @param date
     * @return
     */
    public String getOrderIdPrefix(Date date) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH);
        int day = calendar.get(Calendar.DAY_OF_MONTH);
        int hour = calendar.get(Calendar.HOUR_OF_DAY);
        //补两位,因为一年最多三位数
        String monthFormat = String.format(&quot;%1$02d&quot;, month + 1);
        //补两位，因为日最多两位数
        String dayFormat = String.format(&quot;%1$02d&quot;, day);
        //补两位，因为小时最多两位数
        String hourFormat = String.format(&quot;%1$02d&quot;, hour);
        StringBuilder uniqueId = new StringBuilder();
        return uniqueId.append(year).append(monthFormat).append(dayFormat).append(hourFormat).toString();
    }

    /**
     * 参数生成全局唯一ID
     *
     * @param prefix
     * @return
     */
    public String orderId(String prefix) {
        String key = new StringBuilder().append(&quot;DEMO:ORDER_ID_&quot;).append(prefix).toString();
        Long increment = redisTemplate.opsForValue().increment(key, 1);
        //往前补6位
        return new StringBuilder().append(prefix).append(String.format(&quot;%1$06d&quot;, increment)).toString();
    }

    /**
     * 直接生成全局唯一ID
     * @param date  时间
     * @return 全局唯一ID
     */
    public String createUniqueId(Date date) {

        String orderIdPrefix = getOrderIdPrefix(date);
        String registrationNo = orderId(orderIdPrefix);
        return registrationNo;
    }

}
</code></pre>
<h2 id="5测试类">5.测试类</h2>
<pre><code class="language-java">package com.example.demo;
 
import com.example.demo.service.PrimaryKeyService;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
 
import java.util.Date;
@RunWith(SpringRunner.class)
@SpringBootTest
public class DemoApplicationTests {
    @Autowired
    private PrimaryKeyService primaryKeyService;
 
    @Test
    public void contextLoads() {
        long startMillis = System.currentTimeMillis();
        String orderIdPrefix = primaryKeyService.getOrderIdPrefix(new Date());
        for (int i = 0; i &lt; 10; i++) {
            Long aLong = primaryKeyService.orderId(orderIdPrefix);
            System.out.println(aLong);
        }
        long endMillis = System.currentTimeMillis();
        System.out.println(&quot;生成速度:&quot;+(endMillis-startMillis)+&quot;,单位毫秒&quot;);
    }
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://flakkaqi.github.io/post-images/1589003814324.webp" alt="" loading="lazy"></figure>
]]></content>
    </entry>
</feed>